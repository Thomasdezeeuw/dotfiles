#
# # Environment variables
#

# Add user bin to path.
PATH="$HOME/bin:$PATH"

# Vim as the editor.
export EDITOR="vim"
export VISUAL="$EDITOR"
export GIT_EDITOR="$EDITOR"

# Boring language stuff.
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# Pretty colors, yey!
export CLICOLOR=1

# Pretty command prompt, see below.
export PROMPT_COMMAND=prompt_command

#
# # Profile extensions
#

PROFILE_ROOT=$(dirname ${BASH_SOURCE[0]})

# Load programming language specific profile extensions.
for file in $PROFILE_ROOT/lang/*; do
	source "$file"
done

# Load OS specific profile extensions.
OS=$(uname -s)
source "$PROFILE_ROOT/os/${OS,,}"

#
# # Commands and aliases
#

alias tmpdir="cd `mktemp -d`" # Create a temporary directory and cd into it.
alias q="exit"                # Quick exit.
alias ls="exa"                # I prefer exa.
alias la="ls -a"              # Show me all the things!
alias l="ls -l"               # Quick list.
alias vim="vim -p"            # Open each file in a separate tab.
alias e="vim"                 # I got super lazy.
# Setup ssh agent.
alias setup_ssh='eval `ssh-agent -s` > /dev/null && ssh-add'
# Use different notes directory.
alias notes="NOTES_ROOT=~/src/notes/weekly notes"

# Overwrites the `rm` command, but only in the shell not in scripts.
rm() {
	echo "Did you mean 'trash'?"
	return 1
}

#
# # Bash settings
#

# Case-insensitive globbing (used in pathname expansion).
shopt -s nocaseglob;

# Append to the Bash history file, rather than overwriting it.
shopt -s histappend;

# Cd without "cd".
shopt -s autocd

# Make sure we clean up after ourselves.
shopt -s checkjobs

# Deal with resizing windows.
shopt -s checkwinsize

# Some convenience options, most of them are enabled by default.
shopt -s cmdhist
shopt -s dirspell
shopt -s dotglob
shopt -s expand_aliases
shopt -s extquote
shopt -s globstar

# Autocompletion.
[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion

#
# # Bash prompt
#

# Get a clean directory for the prompt.
# When in a git directory remove everything before the start of the git project.
# Replaces the home directory with "~".
prompt_dir() {
	# Get the git root, defaulting to nothing.
	local GIT_DIR=$(git rev-parse --show-toplevel 2>&1)
	if [ $? != 0 ]; then
		GIT_DIR=""
	fi

	# The entire git path, but the last directory.
	local TRIM_DIR=$(printf "$GIT_DIR" | rev | cut -d'/' -f2- | rev)

	local PWD=$(pwd -P)
	# When in a git directory remove everything but the last directory, or else
	# removes nothing.
	local DIR=${PWD#${TRIM_DIR}}
	# Replace the directory path with "~".
	local DIR=${DIR/$HOME/\~}
	# Remove the last "/".
	local DIR=${DIR/\//}

	printf "$DIR"
}

# Get the current git branch.
git_branch() {
	git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1 /'
}

# Set the foreground to a rgb color. Call like `fg_color r255 g255 b255`.
fg_color() {
	printf "\[\x1b[38;2;$1;$2;$3m\]"
}

# The actual prompt.
prompt_command() {
	# Get exit code from previous command, get this here otherwise the commands
	# below will overwrite it.
	local EXIT=$?

	# Print a new line.
	printf "\r\n"

	PS1="$(fg_color 93 200 253)$(prompt_dir) " # Blue directory.
	PS1+="$(fg_color 108 108 108)$(git_branch)" # Gray git branch.

	# Show white username@hostname, if in a ssh session.
	if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
		PS1+="$(fg_color 255 255 255)\u@\h "
	fi

	# Red on failure, green otherwise
	if [ $EXIT != 0 ]; then
		PS1+="$(fg_color 252 93 91)"            # Green.
	else
		PS1+="$(fg_color 98 245 146)"           # Red.
	fi
	PS1+="Î»\[\e[0m\] "                          # A lambda and reset the colors.
}
