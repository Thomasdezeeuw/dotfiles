#
# # Environment variables
#

# Add a path to $PATH, first checking if the directory exists and if it's not
# already in the list.
__add_to_path() {
	new="$1"
	if [[ -d "$new" && "$PATH" != *"$new"* ]]; then
		if [[ "$2" == "first" ]]; then
			export PATH="$new:$PATH"
		else
			export PATH="$PATH:$new"
		fi
	fi
}

# Add user bin to path.
__add_to_path "$HOME/bin" "first"

# Vim as the editor.
export EDITOR="vim"
export VISUAL="$EDITOR"
export GIT_EDITOR="$EDITOR"

# Boring language stuff.
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# Pretty colors, yey!
export CLICOLOR=1

# Don't listen to ctrl-d, I hit that way too often.
export IGNOREEOF=2

# Determine what shell we're using.
case $(basename -- "$0" || "$0") in
"bash" | "-bash")
	shell="bash"
	;;
"zsh" | "-zsh")
	shell="zsh"
	;;
"sh" | "-sh")
	shell="sh"
	;;
*)
	echo "Unknown shell '$0', only supports bash or zsh" >&2
	sleep 100
	exit 1
	;;
esac

# Utility function to determine if a binary is available.
has_bin() {
	type "$1" > /dev/null 2> /dev/null
}

#
# # Profile extensions
#

if [ "$shell" = "bash" ]; then
	PROFILE_ROOT=$(dirname ${BASH_SOURCE[0]})
elif [ "$shell" = "zsh" ]; then
	PROFILE_ROOT=$(dirname ${(%):-%N})
else
	unset PROMPT_COMMAND
	unset SHELL
fi

# Load OS specific profile extensions.
OS=$(uname -s | tr "[:upper:]" "[:lower:]")
source "$PROFILE_ROOT/os/$OS"

# Load programming language specific profile extensions.
for file in "$PROFILE_ROOT/lang/"*; do
	source "$file"
done

export SHELL="$(command -v "$shell")"

#
# Setup SSH
#

# Ensure that ssh-agent is running.
ssh-add -l &>/dev/null
if [ "$?" == 2 ]; then
	eval $(ssh-agent -s)
fi

# Ensure identities are added to the agent.
if ! ssh-add -L > /dev/null; then
	echo "Adding identities to ssh-agent"
	ssh-add
fi

#
# # Commands and aliases
#

alias tmpdir='cd $(mktemp -d)' # Create a temporary directory and cd into it.
alias q="exit"                 # Quick exit.
has_bin exa && alias ls="exa"  # I prefer exa.
has_bin rg && alias grep="rg"  # THA SPEED!
alias la="ls -a"               # Show me all the things!
alias l="ls -l"                # Quick list.
alias vim="vim -p"             # Open each file in a separate tab.
alias e="vim"                  # I got super lazy.
alias scp=sftp                 # Use sftp instead.
has_bin gmake && alias make="gmake --jobs=$(nproc) --no-print-directory"
# UTC date in RFC3339 format.
alias date_utc="date -u +'%Y-%m-%dT%H:%M:%SZ'"
# Quick webserver to serve the current directory.
alias serve="python3 -m http.server --bind 127.0.0.1"
# Use different notes directory.
alias notes="NOTES_ROOT=~/src/notes/weekly notes"
ts() {
	name="$1"
	dir="$HOME/src/$name"
	[ -d "$dir" ] && args="-c $dir" || args=""
	if [ ! -z "$TMUX" ]; then
		if ! tmux has-session -t "$name" 2> /dev/null; then
			# Create a new session but don't attach to it.
			tmux new-session -A $args -t "$name" -s "$name" -d
		fi
		tmux switch-client -t "$name"
	else
		tmux new-session -A $args -t "$name" -s "$name"
	fi
}

# Overwrites the `rm` command, but only in the shell not in scripts.
has_bin trash && rm() {
	echo "Did you mean 'trash'?"
	return 1
}

# Search files using `rg` and then open them all in vim.
# FIXME: this doesn't work with spaces. The output of `rg` doesn't add quotes
# around the path names.
has_bin rg && erg() {
	e "+/${1/\//\\/}\c" `rg --max-count 1 --files-with-matches "$1" ${@:2}`
}

econflicts() {
	e +/"=======\c" `git diff --name-only --diff-filter=U --relative`
}

#
# # Prompt utils.
#

# Exit status is 0 if inside a git repo, 1 otherwise.
in_git_repo() {
	[ -d .git ] || git rev-parse --is-inside-work-tree > /dev/null 2> /dev/null
}

# Returns 1 if the branch is dirty, 0 otherwise.
#
# Note: only works if in a repo.
is_tree_clean() {
	git diff --quiet --ignore-submodules HEAD 2> /dev/null
}

# The current git branch.
git_branch() {
	git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1 /'
}

# Get a clean directory for the prompt.
# When in a git repo this removes everything before the start of the root of the
# repo, also replaces the home directory with "~".
prompt_dir() {
	# Determine if we're in a git repo. If so we get the full path to the repo,
	# or we'll have an empty string.
	local GIT_DIR=$(git rev-parse --show-toplevel 2> /dev/null)

	if [ ! -z "$GIT_DIR" ]; then
		# If we're in a git repo we'll remove the entire path up to the repo
		# root directory, e.g. given a `GIT_DIR` of "~/src/repo_root" this will
		# be "~/src/".
		local GIT_TRIM_DIR=$(printf "$GIT_DIR" | rev | cut -d'/' -f2- | rev)
		local DIR=$(pwd -P | sed "s#^$GIT_TRIM_DIR/##")
	else
		# Replace the home directory path with "~/".
		local DIR=$(pwd | sed "s#^$HOME#~#")
	fi

	# Remove the last "/".
	printf "$DIR" | sed "s/\/$//"
}

#
# # Start tmux.
#

# Start tmux if its not already running and we're in interactive mode.
has_bin tmux && if [[ $- == *i* && -z "${TMUX+x}" ]]; then
	tmux new-session -A -t main -s main
fi
